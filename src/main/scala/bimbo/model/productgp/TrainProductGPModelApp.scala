package bimbo.model.productgp

import java.util.concurrent.atomic.AtomicInteger
import com.typesafe.scalalogging.slf4j.LazyLogging
import bimbo.data.dao.AvgLogWeeklySaleDAO
import bimbo.data.dao.ClientNamesDAO
import bimbo.data.dao.ItemByProductDAO
import bimbo.data.dao.allitems.AllTrainItemsDAO
import breeze.linalg.DenseVector
import breeze.numerics.log
import dk.gp.gpr.gpr
import dk.gp.util.saveObject
import bimbo.data.dao.ItemSegmentDAO
import bimbo.data.Item
import dk.gp.util.loadObject
import breeze.stats._
import dk.gp.gpr.GprModel

object TrainProductGPModelApp extends LazyLogging {

  val clientNamesDAO = ClientNamesDAO("c:/perforce/daniel/bimbo/cliente_tabla.csv")
  val allItemsDAO = AllTrainItemsDAO("c:/perforce/daniel/bimbo/segments/train_8.csv", clientNamesDAO)
  val itemDAO = ItemByProductDAO(allItemsDAO)

  val avgLogWeeklySaleDAO = AvgLogWeeklySaleDAO("c:/perforce/daniel/bimbo/stats/clientAvgLogWeeklySale_8.csv")

  logger.info("Creating itemSegmentDAO")
  val itemSegmentDAO = ItemSegmentDAO("target/segmentByProductClient.kryo")

  val modelParamsBySegmentId: Map[Int, (Array[Double], Double)] = Map() // = loadObject[Map[Int, (Array[Double], Double)]]("target/segmentGPModelParams.kryo")

  def main(args: Array[String]): Unit = {

    logger.info("Getting product ids for training...")
    val productIds = List(43261, 32287, 45296, 49988, 34665, 6085, 33902, 33004, 36949, 34616, 49185, 5918, 1168, 36192, 47075, 46072, 34452, 30177, 36224, 31585, 36290, 36622, 1899, 34645, 43074, 37220, 46195, 36340, 46166, 36141, 6566, 46095, 32289, 1554, 35974, 1686, 31207, 43097, 36899, 2309, 31192, 6177, 48597, 30566, 45305, 5718, 32886, 31006, 217, 35851, 43229, 46102, 35632, 36323, 35977, 35146, 48091, 43089, 49994, 2062, 49492, 31394, 40297, 49737, 48135, 9717, 32558, 37150, 32274, 48076, 35110, 31315, 31089, 46108, 34876, 48228, 37191, 33779, 30421, 43248, 35862, 35293, 49992, 35933, 4234, 30194, 1608, 35527, 36600, 46068, 36336, 1164, 46299, 3446, 715, 43111, 30814, 37131, 3826, 36618, 43364, 32334, 45223, 34801, 49860, 33266, 31188, 30385, 32363, 30694, 43192, 33643, 46190, 42470, 36579, 36400, 47940, 30972, 31519, 34389, 5921, 35955, 31784, 35108, 35425, 36532, 36006, 33068, 49928, 41830, 46106, 32668, 31684, 7761, 43212, 33030, 46112, 35249, 36319, 36147, 33294, 48695, 36591, 40430, 33683, 36596, 46088, 44372, 42122, 48557, 31593, 34854, 46254, 31711, 34328, 36627, 43256, 40449, 34355, 43353, 46103, 35976, 40290, 37173, 157, 48949, 46203, 32863, 35784, 40234, 36002, 34299, 46115, 30424, 34869, 47944, 36659, 36151, 36764, 32142, 4514, 36601, 45523, 35143, 34851, 32283, 49736, 33353, 35214, 45527, 36689, 31624, 7144, 34348, 30189, 43346, 35242, 35897, 46169, 34787, 45795, 46250, 33246, 33114, 34200, 35564, 34084, 46083, 33241, 30378, 43389, 31279, 43184, 34793, 31689, 46120, 43120, 31198, 48126, 35401, 30562, 48232, 35570, 47980, 634, 46098, 132, 33334, 37241, 34617, 36166, 49443, 35457, 32288, 35051, 43193, 6700, 35125, 30417, 34469, 31319, 32278, 36023, 43034, 3606, 41921, 45565, 31775, 32799, 31596, 49740, 37520, 32222, 36274, 30111, 46246, 43028, 36339, 36325, 35729, 35426, 7814, 1153, 43062, 36092, 37359, 40448, 36329, 30374, 32491, 46124, 35852, 31497, 43157, 714, 32335, 2589, 30015, 37007, 9753, 36310, 42227, 46086, 36289, 6820, 34781, 160, 35294, 36883, 45295, 36159, 46447, 43189, 31520, 35631, 45320, 42086, 47066, 34913, 30178, 46097, 32441, 32275, 30584, 4053, 41725, 33263, 34959, 43381, 32436, 4947, 48934, 42089, 5460, 665, 36320, 33432, 35807, 43176, 31670, 48925, 46206, 43243, 36333, 32301, 31589, 32999, 37355, 46174, 37177, 43349, 48861, 48985, 32290, 30099, 1143, 43317, 36729, 35924, 36003, 4512, 33265, 1111, 46238, 32286, 46313, 8768, 36597, 53, 35614, 5919, 45308, 46214, 32409, 47123, 36000, 46114, 46101, 35739, 4109, 46241, 37379, 33242, 4301, 35097, 46074, 32279, 30379, 8864, 35114, 36533, 34867, 36946, 48806, 49996, 33740, 32862, 31015, 32223, 4513, 3428, 46087, 48893, 49442, 42437, 34080, 32963, 34227, 43082, 43347, 33074, 32958, 32935, 30595, 36024, 36791, 33190, 37400, 35830, 43018, 36501, 35698, 32282, 48127, 32639, 34670, 30805, 37265, 36930, 4152, 41, 779, 36338, 31246, 46253, 37401, 31695, 36194, 45447, 9699, 134, 34983, 30383, 36806, 36321, 205, 36529, 42638, 36343, 36441, 31197, 43119, 5434, 35783, 33682, 31032, 32894, 31581, 36692, 43367, 48694, 1167, 36328, 35247, 34068, 31583, 36978, 32304, 34337, 31769, 31710, 412, 31781, 32954, 4919, 48218, 34644, 6507, 9416, 45449, 6437, 48248, 32141, 42616, 37223, 46062, 46119, 36130, 46138, 34542, 36629, 31766, 2028, 2734, 30916, 37137, 49920, 47068, 37014, 32376, 36155, 43373, 4943, 34333, 36091, 3319, 35563, 35444, 31763, 48250, 36456, 33769, 30556, 36854, 34904, 31201, 36164, 33737, 43339, 37519, 32221, 36309, 35840, 48039, 48216, 2817, 35295, 33678, 49782, 43263, 43219, 49552, 42083, 43131, 713, 45313, 32817, 42436, 33673, 42215, 37133, 36641, 48125, 7145, 30110, 43377, 32336, 30387, 30092, 36175, 9248, 35785, 35972, 36988, 40292, 36502, 31767, 42237, 45183, 3678, 46205, 48118, 31190, 46215, 37356, 36843, 35999, 46113, 30773, 33382, 43158, 31799, 49779, 33741, 48346, 32804, 33300, 47887, 32280, 30370, 33773, 36004, 49997, 35149, 30423, 30900, 36886, 34958, 4477, 35412, 3160, 2065, 36727, 890, 32285, 36334, 42453, 48689, 36951, 49990, 32492, 46173, 30251, 37011, 2261, 35989, 30581, 31587, 6645, 36969, 36710, 3977, 36744, 30380, 33264, 46225, 37232, 34078, 40640, 30871, 32641, 108, 5410, 37442, 37588, 43394, 31575, 45294, 42783, 35031, 34770, 36794, 46440, 5340, 1198, 31200, 36398, 35439, 35301, 1643, 3687, 2064, 31524, 306, 135, 43195, 30904, 34111, 45567, 35244, 32144, 49993, 35753, 33189, 36723, 6476, 32685, 32281, 36947, 46706, 44285, 33681, 36691, 30191, 37185, 42225, 37015, 1166, 31618, 162, 35740, 35227, 47910, 32204, 43237, 37578, 46301, 43348, 46256, 34257, 33243, 31245, 35095, 36734, 36117, 4859, 33260, 32295, 33909, 30384, 33381, 5710, 43254, 40641, 36830, 8863, 37228, 36090, 37222, 43359, 35212, 32207, 30906, 35567, 5716, 43137, 42538, 46100, 35828, 36327, 31473, 1156, 43083, 2060, 30573, 47942, 49739, 32938, 1647, 32428, 739, 46110, 34984, 36277, 46288, 33185, 36189, 41935, 7724, 34909, 49734, 36589, 43236, 34894, 36911, 4240, 35693, 35454, 45299, 35248, 46224, 43383, 40639, 36337, 43279, 30091, 35517, 30746, 48121, 36193, 9082, 36058, 34935, 46197, 33359, 30265, 36457, 36342, 36992, 5277, 37153, 48029, 32838, 48374, 32960, 34915, 48303, 36709, 48912, 34646, 49810, 3970, 46107, 5223, 1702, 30550, 33192, 33267, 35842, 48227, 35973, 33033, 34118, 48266, 45182, 34495, 31191, 35120, 48709, 45306, 36599, 34468, 36538, 36932, 35569, 32816, 30250, 4150, 30218, 40990, 49519, 6420, 33048, 31518, 36440, 30582, 34683, 33742, 35484, 42128, 35895, 30706, 43361, 33261, 35565, 33198, 31316, 36872, 5917, 44576, 48043, 36940, 36535, 48001, 34187, 46962, 1949, 36726, 5386, 30376, 31579, 32997, 34783, 8825, 36588, 46275, 31005, 48891, 4102, 36191, 33207, 3320, 43230, 31626, 31499, 36442, 46304, 46290, 37175, 46143, 33679, 31783, 33889, 43380, 36005, 43075, 34077, 46111, 4468, 46226, 35704, 45293, 4126, 31768, 36153, 35011, 43306, 34933, 46216, 34901, 36595, 30971, 46065, 35625, 30235, 34373, 33657, 8865, 31594, 34207, 3978, 43249, 30505, 34081, 30008, 4153, 46090, 30381, 32642, 4774, 47950, 48804, 48345, 43278, 37426, 43291, 30877, 48021, 31277, 32885, 2230, 36335, 31484, 214, 40606, 31771, 31194, 151, 1348, 32952, 46711, 46104, 37221, 31880, 32143, 48000, 46230, 46240, 43360, 9711, 35053, 49735, 32284, 5430, 43070, 2604, 35072, 1876, 36001, 36250, 35445, 183, 37016, 5371, 6490, 46116, 46227, 46255, 49738, 48132, 49765, 45321, 46194, 32220, 36844, 36963, 43255, 36602, 35413, 48274, 46148, 31013, 30693, 48117, 30553, 35245, 36948, 33794, 35906, 46172, 35228, 5200, 47943, 32845, 31177, 37667, 36907, 33743, 32961, 48002, 46298, 36587, 46084, 32557, 48246, 36057, 31619, 36143, 43356, 31299, 33188, 37031, 36991, 35975, 7829, 49989, 131, 46136, 45528, 34893, 31231, 36912, 163, 48137, 30946, 47958, 46223, 36763, 35131, 46099, 34083, 44597, 30187, 37425, 43388, 32092, 32277, 122, 46076, 36439, 33853, 36089, 33262, 36722, 48927, 2438, 46204, 40942, 30190, 43252, 36614, 35241, 33693, 33429, 31861, 35644, 100, 43110, 49769, 44292)
   
    val trainItems = productIds.flatMap(productId => itemDAO.getProductItems(productId))
    val segmentIds = productIds.flatMap(productId => itemDAO.getProductItems(productId).map(item => itemSegmentDAO.getSegment(item))).distinct//.take(1)
    val i = new AtomicInteger(1)
    val gprParamsBySegmentId: Map[Int, (Array[Double], Double)] = segmentIds.par.map {
      segmentId =>

        val trainedModelParams = modelParamsBySegmentId.get(segmentId) match {
          case Some(modelParams) => modelParams
          case None => {

            logger.info("Training model %d/%d,segmentId=%d".format(i.getAndIncrement, segmentIds.size, segmentId))
            val (trainedCovParams, trainedNoiseLogStdDev) = trainGprModel(segmentId, trainItems, itemDAO, avgLogWeeklySaleDAO)

            (trainedCovParams, trainedNoiseLogStdDev)

          }
        }

        segmentId -> trainedModelParams
    }.toList.toMap

    saveObject(gprParamsBySegmentId, "target/segmentGPModelParams.kryo")

  }

  private def trainGprModel(segmentId: Int, trainItems: Seq[Item], itemDAO: ItemByProductDAO, avgLogWeeklySaleDAO: AvgLogWeeklySaleDAO): (Array[Double], Double) = {
    val segmentItems = trainItems.filter(item => itemSegmentDAO.getSegment(item) == segmentId)

    val x = extractFeatureVec(segmentItems, avgLogWeeklySaleDAO)
    val y = DenseVector(segmentItems.map(i => log(i.demand + 1)).toArray)

    val gprModel = GprModel(x, y, ProductCovFunc(), DenseVector(log(1),log(1),log(1)), log(1), mean(y))

    logger.info("Trained covFuncParams=%s, noiseLogStdDev=%f".format(gprModel.covFuncParams, gprModel.noiseLogStdDev))

    (gprModel.covFuncParams.toArray, gprModel.noiseLogStdDev)
  }
}